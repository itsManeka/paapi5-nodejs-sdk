name: CI Tests

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Lint code
      run: |
        echo "🔍 Running code quality checks..."
        
        # Check for potential security issues in sample files
        node -e "
          const fs = require('fs');
          const path = require('path');
          
          console.log('🔐 Security check: Scanning sample files...');
          
          const sampleFiles = fs.readdirSync('.').filter(f => f.startsWith('sample') && f.endsWith('.js'));
          
          for (const file of sampleFiles) {
            const content = fs.readFileSync(file, 'utf8');
            
            // Check for exposed credentials
            if (content.includes('AKIA') && !content.includes('process.env')) {
              throw new Error(\`Security issue: Exposed AWS credentials in \${file}\`);
            }
            
            // Check for process.env usage
            if (!content.includes('process.env.PA_API_ACCESS_KEY')) {
              console.log(\`⚠️  Warning: \${file} should use environment variables\`);
            } else {
              console.log(\`✅ \${file} uses secure environment variables\`);
            }
          }
          
          console.log('✅ Security check passed');
        "

    - name: Validate package structure
      run: |
        echo "📦 Validating package structure..."
        
        node -e "
          const fs = require('fs');
          const pkg = require('./package.json');
          
          console.log('Package name:', pkg.name);
          console.log('Package version:', pkg.version);
          
          // Check required files
          const requiredFiles = [
            'package.json',
            'README.md', 
            'LICENSE.txt',
            'src/index.js',
            'index.d.ts'
          ];
          
          for (const file of requiredFiles) {
            if (!fs.existsSync(file)) {
              throw new Error(\`Required file missing: \${file}\`);
            }
            console.log(\`✅ \${file} exists\`);
          }
          
          // Check src/model directory
          const modelDir = 'src/model';
          if (!fs.existsSync(modelDir)) {
            throw new Error('src/model directory missing');
          }
          
          const modelFiles = fs.readdirSync(modelDir);
          console.log(\`📁 Found \${modelFiles.length} model files\`);
          
          // Check for OffersV2 models
          const offersV2Models = ['OffersV2.js', 'Money.js', 'DealDetails.js', 'OfferPriceV2.js'];
          for (const model of offersV2Models) {
            if (!modelFiles.includes(model)) {
              throw new Error(\`Missing OffersV2 model: \${model}\`);
            }
            console.log(\`✅ \${model} exists\`);
          }
        "

    - name: Test SDK loading
      run: |
        echo "🧪 Testing SDK loading and exports..."
        
        node -e "
          console.log('Testing SDK import...');
          const sdk = require('./src/index.js');
          
          // Test basic exports
          if (!sdk.ApiClient) throw new Error('ApiClient not exported');
          if (!sdk.DefaultApi) throw new Error('DefaultApi not exported');
          
          console.log('✅ Basic exports available');
          
          // Test OffersV2 models
          const offersV2Models = ['OffersV2', 'Money', 'DealDetails', 'OfferPriceV2', 'SavingsV2'];
          for (const model of offersV2Models) {
            if (!sdk[model]) {
              throw new Error(\`OffersV2 model not exported: \${model}\`);
            }
            console.log(\`✅ \${model} exported\`);
          }
          
          console.log('🎉 All SDK tests passed!');
        "

    - name: Test TypeScript definitions
      run: |
        echo "📝 Testing TypeScript definitions..."
        
        # Install TypeScript
        npm install -g typescript@latest
        
        # Create test TypeScript file
        cat > test-types.ts << 'EOF'
        import * as PAAPI from './index';
        
        // Test basic request types
        const searchRequest: PAAPI.SearchItemsRequest = {
          PartnerTag: 'test-tag',
          PartnerType: 'Associates',
          Keywords: 'test product',
          SearchIndex: 'All',
          ItemCount: 10
        };
        
        const getItemsRequest: PAAPI.GetItemsRequest = {
          PartnerTag: 'test-tag',
          PartnerType: 'Associates',
          ItemIds: ['B123456789']
        };
        
        // Test OffersV2 types
        const money: PAAPI.Money = {
          Amount: 29.99,
          Currency: 'USD',
          DisplayAmount: '$29.99'
        };
        
        const offersV2: PAAPI.OffersV2 = {
          Listings: [{
            Price: {
              Money: money
            },
            Availability: {
              Message: 'In Stock',
              Type: 'IN_STOCK'
            },
            Condition: {
              Value: 'New'
            },
            IsBuyBoxWinner: true,
            MerchantInfo: {
              Name: 'Amazon',
              Id: 'AMAZON'
            }
          }]
        };
        
        // Test Item type with OffersV2
        const item: PAAPI.Item = {
          ASIN: 'B123456789',
          ItemInfo: {
            Title: {
              DisplayValue: 'Test Product'
            }
          },
          OffersV2: offersV2
        };
        
        console.log('TypeScript definitions test completed successfully');
        EOF
        
        # Compile TypeScript file
        tsc test-types.ts --noEmit --strict --skipLibCheck
        
        # Clean up
        rm test-types.ts
        
        echo "✅ TypeScript definitions are valid"

    - name: Test sample files syntax
      run: |
        echo "🔍 Testing sample files for syntax errors..."
        
        for file in sample*.js; do
          if [ -f "$file" ]; then
            echo "Testing $file..."
            node -c "$file" || {
              echo "❌ Syntax error in $file"
              exit 1
            }
            echo "✅ $file syntax OK"
          fi
        done
        
        echo "✅ All sample files have valid syntax"

    - name: Check package.json version
      run: |
        echo "📋 Package information:"
        node -e "
          const pkg = require('./package.json');
          console.log('Name:', pkg.name);
          console.log('Version:', pkg.version);
          console.log('Description:', pkg.description);
          console.log('Main:', pkg.main);
          console.log('Keywords:', pkg.keywords ? pkg.keywords.join(', ') : 'None');
          console.log('License:', pkg.license);
          
          // Validate version format
          const versionRegex = /^\d+\.\d+\.\d+(-[a-zA-Z0-9\-\.]+)?$/;
          if (!versionRegex.test(pkg.version)) {
            throw new Error('Invalid version format: ' + pkg.version);
          }
          console.log('✅ Version format is valid');
        "

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: |
        echo "🔐 Running npm security audit..."
        npm audit --audit-level moderate || {
          echo "⚠️  Security vulnerabilities found"
          echo "Please run 'npm audit fix' to resolve issues"
          exit 1
        }
        echo "✅ No security vulnerabilities found"

    - name: Check for secrets in code
      run: |
        echo "🔍 Scanning for potential secrets..."
        
        # Check for common secret patterns
        if grep -r -E "(AKIA[0-9A-Z]{16}|aws_secret_access_key|password.*=)" . --exclude-dir=node_modules --exclude-dir=.git; then
          echo "❌ Potential secrets found in code!"
          exit 1
        fi
        
        echo "✅ No secrets detected in source code"